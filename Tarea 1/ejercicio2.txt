#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define MAX 10000000

int main() {
    int *is_prime = (int *)malloc((MAX + 1) * sizeof(int));
    long long int prime_sum = 0;
    double start_time, end_time;

    // Inicializar el arreglo is_prime
    #pragma omp parallel for
    for (int i = 0; i <= MAX; i++) {
        is_prime[i] = 1;
    }

    // Medir el tiempo de inicio
    start_time = omp_get_wtime();

    // Calcular los n�meros primos utilizando la criba de Erat�stenes
    #pragma omp parallel
    {
        int thread_id = omp_get_thread_num();
        int num_threads = omp_get_num_threads();
        int chunk_size = (MAX + 1) / num_threads;
        int start = thread_id * chunk_size;
        int end = (thread_id == num_threads - 1) ? MAX : start + chunk_size - 1;

        for (int p = 2; p * p <= MAX; p++) {
            if (is_prime[p]) {
                for (int i = 2 * p; i <= end; i += p) {
                    is_prime[i] = 0;
                }
            }
            #pragma omp barrier
        }
    }

    // Calcular la suma de los n�meros primos
    #pragma omp parallel for reduction(+:prime_sum)
    for (int i = 2; i <= MAX; i++) {
        if (is_prime[i]) {
            prime_sum += i;
        }
    }

    // Medir el tiempo de finalizaci�n
    end_time = omp_get_wtime();

    printf("La suma de los n�meros primos en el rango 1-%d es: %lld\n", MAX, prime_sum);
    printf("Tiempo de ejecuci�n: %f segundos\n", end_time - start_time);

    free(is_prime);
    return 0;
}