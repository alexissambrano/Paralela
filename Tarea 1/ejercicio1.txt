#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1000

// Función para inicializar una matriz con valores aleatorios
void initialize_matrix(int matrix[N][N]) {
    #pragma omp parallel for
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 100; // Valor aleatorio entre 0 y 99
        }
    }
}

void multiply_matrices_optimized(int A[N][N], int B[N][N], int C[N][N]) {
    #pragma omp parallel for
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            int result = 0;
            for (int k = 0; k < N; k++) {
                result += A[i][k] * B[k][j];
            }
            C[i][j] = result;
        }
    }
}

int main() {
    int A[N][N];
    int B[N][N];
    int C[N][N];

    // Inicializar las matrices A y B con valores aleatorios
    srand(12345); // Seed para la generación de números aleatorios, puedes usar cualquier valor

    initialize_matrix(A);
    initialize_matrix(B);

    // Medir el tiempo de ejecución para la multiplicación en paralelo
    double start_time = omp_get_wtime();
    multiply_matrices_optimized(A, B, C);
    double end_time = omp_get_wtime();

    printf("Tiempo de ejecución en paralelo: %f segundos\n", end_time - start_time);

    return 0;
}
